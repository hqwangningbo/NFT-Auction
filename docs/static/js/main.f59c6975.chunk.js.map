{"version":3,"sources":["component/Loading/loading.gif","component/Loading/Loading.jsx","component/Home/Home.jsx","component/Connect/Metamask.jsx","component/Connect/NoContract.jsx","component/Layout/HeaderBar.jsx","component/Layout/Footerr.jsx","component/Market/NFTList.jsx","component/Market/Market.jsx","component/MyNFT/MyNFTInfo.jsx","component/MyNFT/MyNFT.jsx","component/About/About.jsx","component/About/wechatcode.jpg","component/About/AboutNFT.jsx","component/Search/Search.jsx","component/NotFound.jsx","App.js","serviceWorker.js","index.js","component/Create/Create.jsx"],"names":["Loading","src","loadingGIF","alt","className","Home","accountAddress","accountBalance","NFTCount","console","log","style","textAlign","fontSize","fontStyle","marginTop","marginLeft","width","to","type","color","backgroundColor","Metamask","connectToMetamask","onClick","background","letterSpacing","NoContract","Headerbar","id","Footer","Date","now","Layout","Footerr","currentYear","getFullYear","DollarCircleOutlined","CopyrightOutlined","href","AntDesignOutlined","MailOutlined","NFTList","props","parseDate","times","h","parseInt","m","s","toString","this","NFT","tokenID","tokenName","mintedBy","currentOwner","previousOwner","window","web3","utils","fromWei","price","transNum","onSale","fontWeight","Auction","endTime","parse","minBid","prompt","duration","NFTContract","methods","beginAuction","send","from","gas","on","location","reload","ended","claimed","highestBidder","claimNFT","value","highestBid","bid","increaseBid","alert","React","Component","Market","NFTs","Auctions","useState","loading","setLoading","useEffect","length","undefined","metaData","map","height","tokenURI","MyNFTInfo","currentTime","endAuction","MyNFT","NFTNumOfAccount","myNFTs","setMyNFTs","filter","target","rel","About","state","name","email","hidden","preview","buttonvalue","toggleShow","bind","setState","AboutNFT","Typography","Paragraph","Search","tokenIdForOwner","setTokenIdForOwner","tokenOwner","setTokenOwner","tokenIdForOwnerNotFound","setTokenIdForOwnerNotFound","tokenIdForMetadata","setTokenIdForMetadata","setTokenMetadata","tokenMetadataLink","setTokenMetadataLink","tokenIdForMetadataNotFound","setTokenIdForMetadataNotFound","getTokenOwner","e","a","preventDefault","call","owner","setTimeout","getTokenMetadata","getTokenMetaData","metadata","substr","slice","onSubmit","required","placeholder","onChange","NotFound","App","componentWillMount","loadingWeb3","loadingBlockchain","tick","getTime","ethereum","Web3","currentProvider","eth","getAccounts","account","metamaskConnected","getBalance","balance","net","getId","netID","netData","NFTAuctionHouse","networks","Contract","abi","address","contractDetected","NFTCounter","i","allNFTs","nft","AuctionsOfNFT","auction","getTotalNumberOfTokensOwnedByAnAddress","enable","timerID","setInterval","clearInterval","basename","HeaderBar","path","exact","element","Create","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","ipfs","create","host","port","protocol","add","buffer","result","hash","createNFT","NFTName","file","files","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","border","visibility"],"mappings":"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","file":"static/js/main.f59c6975.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.dbb22bcf.gif\";","import React from \"react\";\nimport loadingGIF from \"./loading.gif\";\n\nconst Loading = () => {\n  return <img src={loadingGIF} alt=\"Loading..\" className=\"d-block m-auto\" />;\n};\n\nexport default Loading;\n","import React from 'react';\nimport {Button} from \"antd\";\nimport {Link} from \"react-router-dom\";\n\nconst Home = ({ accountAddress, accountBalance, NFTCount }) => {\n    console.log(\"home\")\n    return (\n      <div>\n        <div className=\"jumbotron\">\n          <h1>Crypto NFT Auction House</h1>\n          <p></p>\n          <p className=\"lead\">\n            欢迎来到 NFT 拍卖行，\n            您可以创建自己的 ERC721 标准的 NFT 并在市场上出售。\n          </p>\n          <hr className=\"my-5\" />\n          <div style={{textAlign:\"center\"}}>\n            <p>\n              <span className=\"font-weight-bold\" style={{fontSize:\"25px\",fontStyle:\"initial\"}}>\n              市场上的 NFT 总数 : {NFTCount} <br/>\n              </span><br/>\n            </p>\n          </div>\n          <hr className=\"my-5\" />\n          <p className=\"lead\">账户地址 :\n          <h3>{accountAddress}</h3>\n          </p>\n          <p className=\"lead\">账户余额 :\n          <h3>{accountBalance} ETH</h3>\n          </p>\n          <p>\n            <div style={{marginTop:40,marginLeft:0,width:800}} >\n              <Link to=\"/market\">\n                <button type=\"button\" className=\"btn btn-outline-primary\"\n                        style={{fontSize:20,color:\"#f7f7f9\",backgroundColor:\"#1a1a1a\"}}\n                >探索\n                </button>\n              </Link>\n              <Link to=\"/create\">\n                <button style={{marginLeft:10,fontSize:20}}\n                        type=\"button\" className=\"btn btn-outline-primary\">创建\n                </button>\n              </Link>\n\n            </div>\n          </p>\n        </div>\n      </div>\n    );\n  };\n\nexport default Home;","import React from \"react\";\n\nconst Metamask = ({ connectToMetamask }) => {\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"display-3\">\n        NFT Auction House\n      </h1>\n      <p className=\"lead\">\n        Welcome to NFT Auction House\n        <br/>\n        You Can Create Your Own ERC721 implemented <i>NFTs</i> and Sell Them On The Market.\n      </p>\n      <hr className=\"my-4\" />\n      <button\n        onClick={connectToMetamask}\n        className=\"btn btn-secondary d-flex align-items-center\"\n        style={{ background:\"lightgrey\",fontSize: \"1.0rem\", letterSpacing: \"0.10rem\" }}\n      >\n        Connect Metamask{\" \"}\n      </button>\n    </div>\n  );\n};\n\nexport default Metamask;\n","import React from \"react\";\n\nconst NoContract = () => {\n  return (\n    <div className=\"jumbotron\">\n      <h3>NFT Auction Contract Is Not Detected In This Network.</h3>\n      <hr className=\"my-4\" />\n      <p className=\"lead\">\n        Connect Metamask to Ropsten Testnet Or Localhost 8545 running a custom RPC like Ganache.\n      </p>\n    </div>\n  );\n};\n\nexport default NoContract;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Headerbar = () => {\n    console.log(\"header\")\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"navbar-brand ml-2\">\n            加密 NFT 拍卖行\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div id=\"navbarNav\" className=\"collapse navbar-collapse\">\n          <ul\n            style={{ fontSize: \"0.8rem\", letterSpacing: \"0.2rem\" }}\n            className=\"navbar-nav ml-auto\"\n          >\n            <li className=\"nav-item\">\n              <Link to=\"/market\" className=\"nav-link\">\n                市场\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/create\" className=\"nav-link\">\n                创建\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/my-nfts\" className=\"nav-link\">\n                我的NFTs\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/search\" className=\"nav-link\">\n                搜索\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n                <Link to=\"/aboutme\" className=\"nav-link\">\n                    有关我\n                </Link>\n            </li>\n            <li className=\"nav-item\">\n                <Link to=\"/aboutnft\" className=\"nav-link\">\n                    有关NFT\n                </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Headerbar;\n","import React from \"react\";\nimport { CopyrightOutlined,AntDesignOutlined, DollarCircleOutlined, MailOutlined } from '@ant-design/icons';\nimport {Layout} from 'antd';\nconst t = Date.now();\nconst {Footer} = Layout;\nconst Footerr = () => {\n  const defaultMessage = \"Powered by Ant Design\"\n  const currentYear = new Date().getFullYear();\n  return (\n    <div className=\"jumbotron h-50\" style={{textAlign:\"center\", fontSize:\"18px\"}}>\n      <Footer>\n          Crypto NFT Auction House {<DollarCircleOutlined />}\n          <br/>\n          {<CopyrightOutlined className=\"site-form-item-icon\"/>}{`${currentYear} | ${defaultMessage}`} \n          <a href=\"https://ant.design\"><AntDesignOutlined /></a>\n          <br/>\n          <span>Contact Me : {<MailOutlined/>} 2536935847@qq.com</span>\n      </Footer>\n      {/*<div style={{textAlign:\"right\"}}>{t}</div>*/}\n      \n    </div>\n  );\n};\nexport default Footerr;","import React from \"react\";\n\nclass NFTList extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    parseDate = (times) => {\n        if(times<=0){\n            return \"00时\"+\"00分\"+\"00秒\"\n        }\n        let h = parseInt(times / 60 / 60 % 24); //时\n        h = h < 10 ? '0' + h : h; //不足补0\n        let m = parseInt(times / 60 % 60); // 分\n        m = m < 10 ? '0' + m : m;\n        let s = parseInt(times % 60); // 当前的秒\n        s = s < 10 ? '0' + s : s;\n        return h.toString()+\"时\"+m.toString()+\"分\"+s.toString()+\"秒\"\n    }\n\n    render(){\n        return(\n            <div key={this.props.NFT.tokenID} className=\"mt-4\" style={{marginLeft:40}}>\n                <p>\n                    <span className=\"font-weight-bold\">tokenID</span>\n                    :{\" \"}\n                    {this.props.NFT.tokenID}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Name</span>\n                    :{\" \"}\n                    {this.props.NFT.tokenName}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Created By</span>\n                    :{\" \"}\n                    {this.props.NFT.mintedBy}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Current Owner</span>\n                    :{\" \"}\n                    {this.props.NFT.currentOwner}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Previous Owner</span>\n                    :{\" \"}\n                    {this.props.NFT.previousOwner}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Price</span>\n                    :{\" \"}\n                    {window.web3.utils.fromWei(this.props.NFT.price,\"Ether\")} ETH\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Number of Transfer</span>\n                    :{\" \"}\n                    {this.props.NFT.transNum}\n                </p>\n\n                {\n                    this.props.accountAddress === this.props.NFT.currentOwner ? (\n                        !this.props.NFT.onSale ? (\n                            <button\n                                className=\"btn btn-outline-success mt-4 w-50\"\n                                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\",marginLeft:\"20%\" }}\n                                onClick={ () => {\n                                    let minBid = prompt(\"请输入最低成交价格\");\n                                    let duration = prompt(\"请输入拍卖周期\");\n                                    this.props.NFTContract.methods.beginAuction(this.props.NFT.tokenID, minBid, duration).send({ from: this.props.accountAddress, gas: '3000000'}).on(\"confirmation\", () => {\n                                        window.location.reload();\n                                    });\n                                }}\n                            >\n                                Sale\n                            </button>\n                        ) : (\n                            <p style={{fontWeight:700,fontSize:15}}>\n                                <span className=\"font-weight-bold\">End Time</span> :{\" \"}\n                                { this.parseDate(this.props.Auction.endTime-Date.parse(new Date())/1000)}\n                            </p>\n                        )\n                    ) : (\n                        this.props.NFT.onSale ? (\n                            !this.props.Auction.ended ? (\n                                <div>\n\n                                <p>\n                                    <span className=\"font-weight-bold\">Highest Bidder</span> :{\" \"}\n                                    {this.props.Auction.highestBidder}\n                                </p>\n                                <p>\n                                    <span className=\"font-weight-bold\">Highest Bid</span> :{\" \"}\n                                    {this.props.Auction.highestBid}\n                                </p>\n                                    <p style={{fontWeight:700,fontSize:15}}>\n                                        <span className=\"font-weight-bold\" >End Time</span> :{\" \"}\n                                        {\n                                            this.parseDate(this.props.Auction.endTime-Date.parse(new Date())/1000)\n                                        }\n                                    </p>\n                                <botton\n                                    className=\"btn btn-outline-success mt-4 w-50\"\n                                    style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\",marginLeft:\"15%\" }}\n                                    onClick={ () => {\n                                        console.log(!this.props.Auction.ended)\n\n                                        let bid = prompt(\"Please Enter Your Bidding Price\");\n                                        this.props.NFTContract.methods.increaseBid(\n                                            this.props.NFT.tokenID, bid).send\n                                            ({ from: this.props.accountAddress, gas: '3000000'});\n                                      }}\n                                >\n                                    Bid\n                                </botton>\n                                </div>\n                            ) : (\n                                !this.props.Auction.claimed ? (\n                                    this.props.accountAddress === this.props.Auction.highestBidder ? (\n                                        <botton\n                                            className=\"btn btn-outline-success mt-4 w-50\"\n                                            style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\",marginLeft:\"15%\" }}\n                                            onClick={ () =>{\n                                                this.props.NFTContract.methods.claimNFT(this.props.NFT.tokenID).send({from: this.props.accountAddress, value: this.props.Auction.highestBid, gas: '3000000'});\n                                            }}\n                                        >\n                                            Claim\n                                        </botton>\n                                    ) : (\n                                        <botton\n                                            className=\"btn btn-outline-danger mt-4 w-50\"\n                                            style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\",marginLeft:\"15%\" }}\n                                        >\n                                            Waiting for Claim\n                                        </botton>\n                                    )\n                                ) : (\n                                    <div></div>\n                                )\n                            )\n        \n                        ) : (\n                            <botton\n                                className=\"btn btn-outline-danger mt-4 w-50\"\n                                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\",marginLeft:\"15%\"}}\n                                onClick={()=>{\n                                    alert(\"Not For Sales!\")\n                                }}\n                            >\n                                Not For sale\n                            </botton>\n                        )\n                    )\n                }\n                <br/><br/>\n            </div>\n        )\n    }\n}\n\nexport default NFTList","import React from \"react\"\nimport { useState,useEffect } from \"react\";\nimport {Row, Col} from \"antd\"\nimport NFTList from \"./NFTList\"\n\nconst Market = ({\n    NFTs,\n    accountAddress,\n    NFTCount,\n    NFTContract,\n    Auctions,\n}) => {\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if(NFTs.length !== 0){\n            if(NFTs[0].metaData !== undefined){\n                setLoading(loading);\n            }\n            else setLoading(false);\n        }\n    }, [NFTs]);\n\n    return(\n        <div>\n            <div className=\"jumbotron\">\n                <h1 className=\"display-5\"> NFT 市场</h1>\n                </div>\n            <div className=\"d-flex flex-wrap mb-2\">\n                {NFTs.map((NFT) => {\n                    return(\n                        //,border:\"1px dashed #000\"\n                        <div key={NFT.tokenID} style={{textAlign:\"left\",marginLeft:200,marginTop:40,height:800,width:600}}>\n                                    <img src={NFT.tokenURI} style={{marginLeft:\"20%\"}} id=\"preview_img\" width=\"250px\" height=\"250px\" alt=\"\"></img>\n\n                                    {/*<p>*/}\n                                    {/*    <span className=\"font-weight-bold\">Image Preview URL</span>*/}\n                                    {/*    :{\" \"}*/}\n                                    {/*    <a href={`${NFT.tokenURI}`} target=\"_blank\" rel=\"noopener noreferrer\">{NFT.tokenURI}</a>*/}\n                                    {/*</p>*/}\n                                    <NFTList NFT={NFT}\n                                        accountAddress={accountAddress}\n                                        NFTContract={NFTContract}\n                                        Auction={Auctions[parseInt(NFT.tokenID)-1]}\n                                    />\n                        </div>\n                    )\n                })}\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Market;","import React from \"react\";\n\nexport default class MyNFTInfo extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    parseDate = (times) => {\n        if(times<=0){\n            return \"00时\"+\"00分\"+\"00秒\"\n        }\n        let h = parseInt(times / 60 / 60 % 24); //时\n        h = h < 10 ? '0' + h : h; //不足补0\n        let m = parseInt(times / 60 % 60); // 分\n        m = m < 10 ? '0' + m : m;\n        let s = parseInt(times % 60); // 当前的秒\n        s = s < 10 ? '0' + s : s;\n        return h.toString()+\"时\"+m.toString()+\"分\"+s.toString()+\"秒\"\n    }\n\n    render(){\n        return(\n            <div>\n                <div key={this.props.NFT.tokenID} className=\"mt-4\">\n                <p>\n                    <span className=\"font-weight-bold\">tokenID</span>\n                    :{\" \"}\n                    {this.props.NFT.tokenID}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Name</span>\n                    :{\" \"}\n                    {this.props.NFT.tokenName}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Created By</span>\n                    :{\" \"}\n                    {this.props.NFT.mintedBy}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Previous Owner</span>\n                    :{\" \"}\n                    {this.props.NFT.previousOwner}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Current Owner</span>\n                    :{\" \"}\n                    {this.props.NFT.currentOwner}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Price</span>\n                    :{\" \"}\n                    {window.web3.utils.fromWei(this.props.NFT.price,\"Ether\")} ETH\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">Number of Transfer</span>\n                    :{\" \"}\n                    {this.props.NFT.transNum}\n                </p>\n                </div>\n                {this.props.NFT.onSale ? (\n                      <div>\n                      <p>\n                          <span className=\"font-weight-bold\">Highest Bidder</span> :{\" \"}\n                          {this.props.Auction.highestBidder}\n                      </p>\n                      <p>\n                          <span className=\"font-weight-bold\">Highest Bid</span> :{\" \"}\n                          {this.props.Auction.highestBid}\n                      </p>\n                      <p style={{fontWeight:700,fontSize:15}}>\n                          <span className=\"font-weight-bold\">End Time</span> :{\" \"}\n                          {this.parseDate(this.props.Auction.endTime-Date.parse(new Date())/1000)}\n                      </p>\n                      {this.props.currentTime >= this.props.Auction.endTime ? (\n                        !this.props.Auction.ended ? (\n                          <button\n                          className=\"btn btn-outline-success mt-4 w-50\"\n                          style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                          onClick={ () => {\n                            this.props.NFTContract.methods.endAuction(this.props.NFT.tokenID).send({ from: this.props.accountAddress, gas: '3000000'}).on(\"confirmation\", () => {\n                              window.location.reload();\n                            });\n                          }}\n                          >\n                            End\n                          </button>\n                        ) : (\n                          <botton\n                          className=\"btn btn-outline-danger mt-4 w-50\"\n                          style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                          >\n                              Waiting for Claim\n                          </botton>\n                        )\n                        \n                      ) : (\n                        <button\n                        className=\"btn btn-outline-success mt-4 w-50\"\n                        style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                      >\n                        Not Ended\n                      </button>\n                      )}\n                      </div>\n                    ) : (\n                      <button\n                        className=\"btn btn-outline-success mt-4 w-50\"\n                        style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                        onClick={ () => {\n                          let minBid = prompt(\"Please Enter Minimum Bidding Price\");\n                          let duration = prompt(\"Please Enter Duration For Sales\");\n                          this.props.NFTContract.methods.beginAuction(this.props.NFT.tokenID, minBid, duration).send({ from: this.props.accountAddress, gas: '3000000'}).on(\"confirmation\", () => {\n                            window.location.reload();\n                          });\n                        }}\n                      >\n                        Sell\n                      </button>\n                    )}\n            </div>\n        )\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport MyNFTInfo from \"./MyNFTInfo\";\nimport {Row, Col, Card} from \"antd\"\nconst MyNFT = ({\n    accountAddress,\n    NFTs,\n    NFTContract,\n    NFTNumOfAccount,\n    Auctions,\n    currentTime, \n}) => {\n    const [loading,setLoading] = useState(false);\n    const [myNFTs, setMyNFTs] = useState([]);\n    useEffect(() => {\n        if(NFTs.length !== 0){\n            if(NFTs[0].metaData !== undefined){\n                setLoading(loading)\n            }else{\n                setLoading(false);\n            }\n        }\n        const myNFTs = NFTs.filter(\n            (NFT) => NFT.currentOwner === accountAddress\n        );\n        setMyNFTs(myNFTs);\n    }, [NFTs]);\n\n    return(\n        <div>\n            <div className=\"card mt-1\">\n                <div className=\"card-body align-items-center d-flex justify-content-center\">\n                    <h5>\n                    Total Number of NFTs Own : {NFTNumOfAccount}\n                    </h5>\n\n                </div>\n            </div>\n            <div className=\"d-flex flex-wrap mb-2\">\n                {myNFTs.map((NFT) => {\n                    return (\n                        <div key={NFT.tokenID} style={{textAlign:\"left\",marginLeft:200,marginTop:40}} >\n                                <a href={`${NFT.tokenURI}`} target=\"_blank\" rel=\"noopener noreferrer\"><img src={NFT.tokenURI} id=\"preview_img\" width=\"250px\" height=\"250px\" alt=\"\"></img><br/></a>\n                                   <br/>\n                            <MyNFTInfo\n                                NFT={NFT}\n                                accountAddress={accountAddress}\n                                NFTContract={NFTContract}\n                                Auction={Auctions[parseInt(NFT.tokenID)-1]}\n                                currentTime={currentTime}\n                            />\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default MyNFT;","import React from \"react\"\nimport wechatcode from \"./wechatcode.jpg\"\nimport {Descriptions, Image, Button,Layout} from 'antd'\nexport default class About extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            name:'hqwangningbo',\n            email:'2536935847@qq.com',\n            hidden:true,\n            preview:false,\n            buttonvalue:\"隐藏\"\n        }\n        this.toggleShow = this.toggleShow.bind(this);\n    }\n    toggleShow(){\n        this.setState({\n            hidden: !this.state.hidden,\n            preview : !this.state.preview,\n        })\n    }\n    render(){\n        return(\n            <div>\n            <div className=\"jumbotron\">\n                <h1 className=\"display-10\">关于我</h1>\n            </div>\n            <div className=\"jumbotron\">\n                <p style={{fontSize:20}}>\n                    &nbsp;&nbsp;&nbsp;&nbsp;潘周聃，29岁，硕士毕业于苏黎世联邦理工大学,本科毕业于牛津大学，获得学士学位,很帅,这一点大家有目共睹,作为班里最帅的人,我来谈谈我的帅,我的帅好比冬日里透过落地窗的第一缕阳光,温暖而含蓄,美好却不失煽情,美国时代周刊曾对我的帅做出过这样的评价:仿似米开朗琪罗倾尽所有能精雕出一座完美无瑕的美男像。\n                </p>\n                <p style={{fontSize:20}}>\n                    其实我本人并不赞成这个比喻,首先,这句话把我的帅描述的表面,粗糙,甚至肤浅,其次 不该用“米开朗琪罗倾尽所有能精雕出”应该用“米开朗琪罗倾尽所有也精雕不出”这样更客观的形容词句才行,否则很难使人信服,帅也给我的生活带来了许多困扰 我依稀记得那年夏天,班里女生联名举荐我当班长,一部分女生甚至采取绝食裸奔等过激行为 ,最后我不得不站出来表达自己只想做个平凡人的愿望才让事情平息 ,但这直接引起了班长和其他课代表对我的仇恨,以至于到现在我还是个普通学生\n                </p>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <span>开发者昵称:</span> {this.state.name} <br/>\n                <span>邮箱:</span>{this.state.email}\n            </div>\n            </div>\n        )\n    }\n} ","export default __webpack_public_path__ + \"static/media/wechatcode.333f94a7.jpg\";","import { Typography, Switch } from 'antd';\nimport React from \"react\"\nconst { Paragraph} = Typography;\n\nconst AboutNFT = () => {\n  const [ellipsis, setEllipsis] = React.useState(true);\n\n  return (\n    <div>\n    <div className=\"jumbotron\">\n        <h1 className=\"display-10\">关于 NFT & DAPP</h1>\n    </div>\n    <div className='jumbotron'>\n      <p className='lead'>\n        不可替代的代币 ( NFT ) 是存储在区块链上的不可互换的[需要澄清]数据单元，是一种数字分类帐，可以出售和交易。 [1] NFT 数据单元的类型可能与照片、视频和音频等数字文件相关联。由于每个代币都是唯一可识别的，因此 NFT 不同于区块链加密货币，例如比特币。\n      </p>\n      <p className='lead'>\n        NFT 账本声称提供公开的真实性证明或所有权证明，但 NFT 所传达的合法权利可能不确定。NFT 不限制底层数字文件的共享或复制，不一定传达数字文件的版权，也不阻止创建具有相同关联文件的 NFT。\n      </p>\n      <p>\n      <p className='lead'>\n        去中心化应用程序（DApp、dApp、Dapp、DApp 或 DAPP）是可以自主运行的应用程序，通常通过使用智能合约，在去中心化计算、区块链系统上运行。与传统应用程序一样，DApp 为其用户提供一些功能或实用程序。但是，与传统应用程序不同，DApp 无需人工干预即可运行，也不属于任何一个实体，而是 DApp 分发代表所有权的代币。这些代币根据编程算法分配给系统用户，稀释了 DApp 的所有权和控制权。没有任何一个实体控制系统，应用程序变得去中心化。去中心化应用程序已经通过分布式账本技术（DLT）得到普及，例如构建 DApp 的以太坊区块链。\n      </p>\n      <a href='https://www.theverge.com/22310188/nft-explainer-what-is-blockchain-crypto-art-faq'\n        style={{color:\"blue\",fontSize:\"18px\"}} target=\"_blank\" \n      >\n        What is NFT?\n      </a>\n      <br/>\n      <a href='https://ethereum.org/en/developers/docs/dapps/'\n        style={{color:\"blue\",fontSize:\"18px\"}} target=\"_blank\" \n      >\n        What is DAPP?\n      </a>\n      &nbsp;<br/><br/> \n      <a href='https://ethereum.org/en/nft/' target=\"_blank\" >\n        <h5 className='font-weight'>点击这里了解更多</h5>\n      </a>\n      </p>\n    </div>\n    </div>\n  );\n};\n\nexport default AboutNFT;","import React, { useState } from \"react\";\n\nconst Search = (props) => {\n  const [tokenIdForOwner, setTokenIdForOwner] = useState(\"\");\n  const [tokenOwner, setTokenOwner] = useState(\"\");\n  const [tokenIdForOwnerNotFound, setTokenIdForOwnerNotFound] = useState(false);\n\n  const [tokenIdForMetadata, setTokenIdForMetadata] = useState(\"\");\n  const [tokenMetadata, setTokenMetadata] = useState(\"\");\n  const [tokenMetadataLink, setTokenMetadataLink] = useState(\"\");\n  const [tokenIdForMetadataNotFound, setTokenIdForMetadataNotFound] = useState(false);\n\n  const getTokenOwner = async (e) => {\n    e.preventDefault();\n    try {\n      const owner = await props.NFTContract.methods.getTokenOwner(tokenIdForOwner).call();\n      setTokenOwner(owner);\n      setTimeout(() => {\n        setTokenOwner(\"\");\n        setTokenIdForOwner(\"\");\n      }, 5000);\n    } catch (e) {\n      setTokenIdForOwnerNotFound(true);\n      setTokenIdForOwner(\"\");\n    }\n  };\n\n  const getTokenMetadata = async (e) => {\n    e.preventDefault();\n    try {\n      const metadata = await props.NFTContract.methods.getTokenMetaData(tokenIdForMetadata).call();\n      setTokenMetadata(metadata.substr(0, 60) + \"...\" + metadata.slice(metadata.length - 5));\n      setTokenMetadataLink(metadata);\n      setTimeout(() => {\n        setTokenMetadata(\"\");\n        setTokenIdForMetadata(\"\");\n      }, 5000);\n    } catch (e) {\n      setTokenIdForMetadataNotFound(true);\n      setTokenIdForMetadata(\"\");\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"card mt-1\">\n        <div className=\"jumbotron\">\n            <h1 className=\"display-5\">通过 TokenID 搜索NFT拥有者 & 原数据</h1>\n        </div>\n      </div>\n      <div className=\"p-4 mt-1 border\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <h5>搜索NFT拥有者</h5>\n            <form onSubmit={getTokenOwner}>\n              <div className=\"form-group\">\n                <input\n                  required\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={tokenIdForOwner}\n                  placeholder=\"Enter tokenID\"\n                  onChange={(e) => setTokenIdForOwner(e.target.value)}\n                />\n              </div>\n              <button className=\"mt-3 btn btn-outline-primary\" \n                style={{ width:\"250px\",textAlign:\"center\",background:\"white\",fontSize: \"1.0rem\", letterSpacing: \"0.10rem\" }} type=\"submit\">\n                Search Owner\n              </button>\n              {tokenIdForOwnerNotFound ? (\n                <div className=\"alert alert-danger alert-dissmissible mt-4\">\n                  <button type=\"button\" className=\"close\" data-dismiss=\"alert\">\n                    <span>&times;</span>\n                  </button>\n                  <strong>Token ID Does Not Exist</strong>\n                </div>\n              ) : null}\n            </form>\n            <p className=\"mt-4\">Token Owner : {tokenOwner}</p>\n          </div>\n          <div className=\"mt-4 col-md-12\">\n            <h5>搜索Token原数据</h5>\n            <form onSubmit={getTokenMetadata}>\n              <div className=\"form-group\">\n                <input\n                  required\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={tokenIdForMetadata}\n                  placeholder=\"Enter tokenID\"\n                  onChange={(e) => setTokenIdForMetadata(e.target.value)}\n                />\n              </div>\n              <button className=\"mt-3 btn btn-outline-primary\"\n                style={{ width:\"250px\",textAlign:\"center\",background:\"white\",fontSize: \"1.0rem\", letterSpacing: \"0.10rem\" }} type=\"submit\">\n                Search Metadata\n              </button>\n              {tokenIdForMetadataNotFound ? (\n                <div className=\"alert alert-danger alert-dissmissible mt-4\">\n                  <button type=\"button\" className=\"close\" data-dismiss=\"alert\">\n                    <span>&times;</span>\n                  </button>\n                  <strong>Token ID Does Not Exist</strong>\n                </div>\n              ) : null}\n            </form>\n            <p className=\"mt-4\">\n              Token Metadata :  &nbsp;\n              <a\n                href={`${tokenMetadataLink}`}\n                style={{color:\"blue\"}}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {tokenMetadataLink}\n              </a>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from 'react';\n\nexport default class NotFound extends React.Component{\n\n    render(){\n        return(\n            <div className='jumbotron' style={{textAlign:\"center\",fontSize:\"50px\"}}>\n                <h1>404 Error</h1>\n                <h1>Please Enter The Exact URL</h1>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport {Route, HashRouter,Routes, BrowserRouter} from \"react-router-dom\";\nimport {Layout} from 'antd'\nimport './App.css';\nimport Web3 from \"web3\"\nimport Loading from \"./component/Loading/Loading\"\nimport Home from \"./component/Home/Home\"\nimport Metamask from \"./component/Connect/Metamask\"\nimport NoContract from \"./component/Connect/NoContract\"\nimport Create from \"./component/Create/Create\"\nimport HeaderBar from \"./component/Layout/HeaderBar\"\nimport Footerr from \"./component/Layout/Footerr\"\nimport Market from \"./component/Market/Market\"\nimport MyNFT from \"./component/MyNFT/MyNFT\"\nimport About from \"./component/About/About\"\nimport AboutNFT from \"./component/About/AboutNFT\"\nimport Search from \"./component/Search/Search\"\nimport NotFound from \"./component/NotFound\"\nimport NFTAuctionHouse from \"./build/contracts/NFTAuctionHouse.json\";\nconst {Footer} = Layout;\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      loading : true,\n      metamaskConnected : false,\n      contractDetected : false,\n      accountAddress : \"\",\n      accountBalance : \"\",\n      NFTContract: null,\n      NFTCount : 0,\n      NFTs: [],\n      NFTNumOfAccount: 0,\n      Auctions: [],\n      currentTime: null,\n    };\n  }\n  componentDidMount(){\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillMount = async () =>{\n    await this.loadingWeb3();\n    await this.loadingBlockchain();\n  }\n  componentWillUnmount(){\n    clearInterval(this.timerID)\n  }\n\n  tick = async() => {\n    if(this.state.NFTContract){\n      let currentTime = await this.state.NFTContract.methods.getTime().call();\n      console.log(\"time : \", currentTime)\n      this.setState({currentTime});\n    }\n  }\n\n  loadingWeb3 = async() =>{\n    console.log(\"load web3\")\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum)\n    }\n    else if(window.web3){\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else{\n      window.alert(\"Ethereum Browser Not Detected!\")\n    }\n  }\n\n  loadingBlockchain = async () => {\n    console.log(\"load blockchain\")\n    const web3 = window.web3;\n    const account = await web3.eth.getAccounts();\n    if(account.length === 0){\n      this.setState({\n        metamaskConnected : false\n      })\n    }\n    else{\n      this.setState({\n        metamaskConnected : true,\n        loading:true,\n        accountAddress : account[0],\n      })\n      let balance = await web3.eth.getBalance(account[0])\n      balance = web3.utils.fromWei(balance, \"ether\")\n      this.setState({\n        accountBalance : balance,\n        loading:false,\n      })\n\n      const netID = await web3.eth.net.getId();\n      const netData = NFTAuctionHouse.networks[netID];\n      if(netData){\n        this.setState({loading: true});\n        const NFTContract = new web3.eth.Contract(\n            NFTAuctionHouse.abi,\n            netData.address\n        );\n        this.setState({NFTContract});\n        this.setState({contractDetected: true});\n        \n        const NFTCount = await NFTContract.methods.NFTCounter().call();\n        this.setState({NFTCount});\n        for(let i = 1 ; i <= NFTCount ; i++){\n          const nft = await NFTContract.methods.allNFTs(i).call();\n          this.setState({NFTs: [...this.state.NFTs, nft],});\n          const auction = await NFTContract.methods.AuctionsOfNFT(i).call();\n          this.setState({Auctions: [...this.state.Auctions, auction],})\n        }\n        let NFTNumOfAccount = await NFTContract.methods.getTotalNumberOfTokensOwnedByAnAddress(this.state.accountAddress).call();\n        this.setState({NFTNumOfAccount});\n        this.setState({loading: false});\n\n      }\n    }\n  }\n\n  connectToMetamask = async () =>{\n    console.log(\"connect metamask\")\n    await window.ethereum.enable();\n    this.setState({\n      metamaskConnected : true,\n    })\n    window.location.reload();\n  }\n\n  render(){\n    return(\n      <div>\n        {\n          !this.state.metamaskConnected ? (\n            <Metamask connectToMetamask={this.connectToMetamask}/>\n          ) : ! this.state.contractDetected ? (\n              <NoContract/>\n          ) : this.state.loading ? (\n              <Loading/>\n          ) : (\n              <BrowserRouter basename=\"/\">\n                <HeaderBar/>\n                <Routes>\n                  <Route\n                      path=\"/\"\n                      exact\n                      element={\n                          <Home\n                              accountAddress={this.state.accountAddress}\n                              accountBalance={this.state.accountBalance}\n                              NFTCount={this.state.NFTCount}\n                          />\n                      }\n                  />\n                  <Route\n                      path=\"/market\"\n                      exact\n                      element={\n                          <Market \n                              accountAddress={this.state.accountAddress}\n                              NFTs={this.state.NFTs}\n                              NFTCount={this.state.NFTCount}\n                              NFTContract={this.state.NFTContract}\n                              Auctions={this.state.Auctions}\n                          />\n                      }\n                  />\n                  <Route\n                      path=\"/create\"\n                      exact\n                      element={\n                          <Create\n                              accountAddress={this.state.accountAddress}\n                              NFTContract={this.state.NFTContract}\n                          />\n                      }\n                  />\n                  <Route\n                      path=\"/my-nfts\"\n                      exact\n                      element={\n                          <MyNFT\n                              accountAddress={this.state.accountAddress}\n                              NFTs={this.state.NFTs}\n                              NFTNumOfAccount={this.state.NFTNumOfAccount}\n                              NFTContract={this.state.NFTContract}\n                              Auctions={this.state.Auctions}\n                              currentTime={this.state.currentTime}\n                          />\n                      }\n                  />\n                  <Route\n                      path=\"/search\"\n                      exact\n                      element={\n                          <Search\n                              accountAddress={this.state.accountAddress}\n                              NFTs={this.state.NFTs}\n                              NFTCount={this.state.NFTCount}\n                              NFTContract={this.state.NFTContract}\n                              Auctions={this.state.Auctions}\n                          />\n                      }\n                  />\n                  <Route\n                      path=\"/aboutme\"\n                      exact\n                      element={\n                          <About/>\n                      }\n                  />\n                  <Route\n                      path=\"/aboutnft\"\n                      exact\n                      element={\n                          <AboutNFT/>\n                      }\n                  />\n                  <Route\n                      path=\"*\"\n                      element={\n                          <NotFound/>\n                      }\n                  />\n                </Routes>\n                <Layout>\n                  <Footer>\n                    <Footerr/>\n                  </Footer>\n                </Layout>\n                \n              </BrowserRouter>\n              )\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap\"\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n","import React from \"react\";\nimport {create} from \"ipfs-http-client\";\nimport pinataSDK from '@pinata/sdk';\n\nconst ipfs = create({\n    host: \"ipfs.infura.io\",\n    port: 5001,\n    protocol: \"https\",\n});\n\nexport default class Create extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            NFTName: \"\",\n            tokenURI: '',\n            hash:'',\n            buffer:null,\n        }\n    }\n\n    onSubmit = async(e) => {\n        e.preventDefault();\n        let result  = await ipfs.add(this.state.buffer);\n        this.setState({hash : result.path});\n        let tokenURI = `https://ipfs.infura.io/ipfs/${result.path}`;\n        this.setState({tokenURI});\n        this.props.NFTContract.methods.createNFT(this.state.NFTName, tokenURI, 0).send({\n            from:this.props.accountAddress, gas:'3000000'\n        });\n        console.log(\"NFT Name : \", this.state.NFTName, this.state.tokenURI);\n    }\n\n    onChange = (e) => {\n        e.preventDefault();\n        let file = e.target.files[0];\n        let reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = () =>{\n            this.setState({\n                buffer:Buffer(reader.result),\n            })\n            console.log(\"buffer : \", this.state.buffer);\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <div className=\"jumbotron h-10\">\n                    <h1 className=\"display-5\">创建自己的NFT</h1>\n                </div>\n                <div className=\"p-3 jumbotron mt-1 h-100 border\" >\n                    <div style={{width:300,marginLeft:\"40%\"}}>\n                        <form onSubmit={this.onSubmit} style={{textAlign:\"center\"}}>\n                            <input className=\"form-control-lg\" type=\"file\"  onChange={this.onChange}></input><br/>\n                            <input\n                                required\n                                type=\"text\"\n                                value={this.state.NFTName}\n                                className=\"form-control\"\n                                placeholder=\"请输入你NFT的名字\"\n                                style={{textAlign:\"center\",border:\"1px solid #000\"}}\n                                onChange = {(e) =>\n                                    this.setState({\n                                        NFTName: e.target.value\n                                    })\n                                }\n                            >\n                            </input>\n                            <br/>\n                            <br/>\n                            <br/>\n                            <button className=\"btn btn-outline-primary mt-3\" style={{ width:\"200px\",textAlign:\"center\",background:\"white\",fontSize: \"1.0rem\", letterSpacing: \"0.10rem\" }}>\n                                Create\n                            </button>\n                            <br/><br/>\n                            <p>\n                            <span>Image Preview URL : {this.state.hash === \"\"\n                                ? \"NULL\"\n                                : <a href={`https://ipfs.infura.io/ipfs/${this.state.hash}`} target=\"_blank\"\n                                     style={{color:\"blue\"}} rel=\"noopener noreferrer\">{`https://ipfs.infura.io/ipfs/${this.state.hash}`}</a> }\n                            </span>\n                            </p>\n                            <img src={`https://ipfs.infura.io/ipfs/${this.state.hash}`}\n                                 style={{width:\"400px\" , height:\"400px\",visibility: (this.state.hash == '') ? 'hidden' : 'visible'}}></img>\n\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}"],"sourceRoot":""}