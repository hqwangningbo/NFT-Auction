{
	"compiler": {
		"version": "0.4.24+commit.e67f0147"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "_interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "receiver",
						"type": "address"
					},
					{
						"name": "tokenURI",
						"type": "string"
					}
				],
				"name": "mintNft",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "InterfaceId_ERC165",
				"outputs": [
					{
						"name": "",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_from",
						"type": "address"
					},
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_owner",
						"type": "address"
					},
					{
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "tokenOfOwnerByIndex",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_from",
						"type": "address"
					},
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "exists",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "tokenByIndex",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "receiver",
						"type": "address"
					},
					{
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_from",
						"type": "address"
					},
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_owner",
						"type": "address"
					},
					{
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_approved",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"approve(address,uint256)": {
					"details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
					"params": {
						"_to": "address to be approved for the given token ID",
						"_tokenId": "uint256 ID of the token to be approved"
					}
				},
				"balanceOf(address)": {
					"details": "Gets the balance of the specified address",
					"params": {
						"_owner": "address to query the balance of"
					},
					"return": "uint256 representing the amount owned by the passed address"
				},
				"exists(uint256)": {
					"details": "Returns whether the specified token exists",
					"params": {
						"_tokenId": "uint256 ID of the token to query the existence of"
					},
					"return": "whether the token exists"
				},
				"getApproved(uint256)": {
					"details": "Gets the approved address for a token ID, or zero if no address set",
					"params": {
						"_tokenId": "uint256 ID of the token to query the approval of"
					},
					"return": "address currently approved for the given token ID"
				},
				"isApprovedForAll(address,address)": {
					"details": "Tells whether an operator is approved by a given owner",
					"params": {
						"_operator": "operator address which you want to query the approval of",
						"_owner": "owner address which you want to query the approval of"
					},
					"return": "bool whether the given operator is approved by the given owner"
				},
				"name()": {
					"details": "Gets the token name",
					"return": "string representing the token name"
				},
				"ownerOf(uint256)": {
					"details": "Gets the owner of the specified token ID",
					"params": {
						"_tokenId": "uint256 ID of the token to query the owner of"
					},
					"return": "owner address currently marked as the owner of the given token ID"
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.   * Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"_from": "current owner of the token",
						"_to": "address to receive the ownership of the given token ID",
						"_tokenId": "uint256 ID of the token to be transferred"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"_data": "bytes data to send along with a safe transfer check",
						"_from": "current owner of the token",
						"_to": "address to receive the ownership of the given token ID",
						"_tokenId": "uint256 ID of the token to be transferred"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
					"params": {
						"_approved": "representing the status of the approval to be set",
						"_to": "operator address to set the approval"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "implement supportsInterface(bytes4) using a lookup table"
				},
				"symbol()": {
					"details": "Gets the token symbol",
					"return": "string representing the token symbol"
				},
				"tokenByIndex(uint256)": {
					"details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
					"params": {
						"_index": "uint256 representing the index to be accessed of the tokens list"
					},
					"return": "uint256 token ID at the given index of the tokens list"
				},
				"tokenOfOwnerByIndex(address,uint256)": {
					"details": "Gets the token ID at a given index of the tokens list of the requested owner",
					"params": {
						"_index": "uint256 representing the index to be accessed of the requested tokens list",
						"_owner": "address owning the tokens list to be accessed"
					},
					"return": "uint256 token ID at the given index of the tokens list owned by the requested address"
				},
				"tokenURI(uint256)": {
					"details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
					"params": {
						"_tokenId": "uint256 ID of the token to query"
					}
				},
				"totalSupply()": {
					"details": "Gets the total amount of tokens stored by the contract",
					"return": "uint256 representing the total amount of tokens"
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"_from": "current owner of the token",
						"_to": "address to receive the ownership of the given token ID",
						"_tokenId": "uint256 ID of the token to be transferred"
					}
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/NBToken.sol": "NBToken"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Counter.sol": {
			"keccak256": "0xfaf41736f8aed7de992a8a9a6e8bc793a9467d573d6ecefb9ebfe5166978fd18",
			"urls": [
				"bzzr://5e6afc1af4bee2aabaefc2f8575c3a7a8a4fdc262ad2ec511a6e888d0fe74f7f"
			]
		},
		"contracts/NBToken.sol": {
			"keccak256": "0x85096ea075017879d9600911a781d01d8336aa64026ca5d1ec48612f7a9c9c49",
			"urls": [
				"bzzr://970b8385ab39382098406fdf35aaef37b69d8d2ac6d8c62c39cfe2f5aa170476"
			]
		},
		"zeppelin-solidity/contracts/AddressUtils.sol": {
			"keccak256": "0x5ed3dc711dbb34917afff3c753adf3b0580514d1339cfedaa5a73645d8ac9b56",
			"urls": [
				"bzzr://d597eeb695a3d64766453239e973ddd65994c258ab8d5cab0d90103033ce85fc"
			]
		},
		"zeppelin-solidity/contracts/introspection/ERC165.sol": {
			"keccak256": "0x0ebdca4da96c57978223af3d63ec4b8e85b5e610f9d93ba16c6ef3eab947445f",
			"urls": [
				"bzzr://ae3f9b4b3c73e819e3bb6d51b737239038833430f14049d5f2f9f9d07fa6a94b"
			]
		},
		"zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol": {
			"keccak256": "0xac3cd6a1111cdaafb41182fe8d01508b4540df4f1c2034c96d8452c840ac4094",
			"urls": [
				"bzzr://b852ec1cf3167b19aa993135cda5f0bf2c0590bae829f2d9287314fcdcc50ded"
			]
		},
		"zeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0xa1c5e1d9ebbf654d332ca8e7a5c04a6a6a9d142eeaab3b988c2c909c81a62bef",
			"urls": [
				"bzzr://d062fb4a1b6de1f036ee0e73364a2532c4757eb68e95dd8c5cbb2d17b8732c6a"
			]
		},
		"zeppelin-solidity/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x8bd123a8ad5433aa9e92c06408a140a8f7b3c36eacef3a2589bd986789a79652",
			"urls": [
				"bzzr://d93da4c951ec870ee1fd34825c60f6abce25dac8fb5a1cb58c4c0cecbf939ee3"
			]
		},
		"zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol": {
			"keccak256": "0xa2183c6e9d4c3c4298264261b3bb4a62edc3c82879a8b29b3289d539ee841ebb",
			"urls": [
				"bzzr://260902d7aa3d96cdf8f6ade7df9bac8aa8643f8096d29d3f2ee4f27b72204c44"
			]
		},
		"zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol": {
			"keccak256": "0xec074c3e575c036819ca0d72103b85eac4b78fa7f052c16113bee72051d44e8e",
			"urls": [
				"bzzr://4e01f77439d011d13dc57ad00f8b20bb51d7566bcbb943595e9063849aa92da3"
			]
		},
		"zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol": {
			"keccak256": "0x683846efa69cff61f0b2e099f4c55f218a0ba89c0bc2502b3a50f23641fe1a3e",
			"urls": [
				"bzzr://9d97cc9f6312101e3aab958763aadef2682e4a2a87f6fffb1bc43b9d41075555"
			]
		},
		"zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol": {
			"keccak256": "0x63d79066bdea45317e84c1adbda4a7346b7bec8b53884e3e603887a71d19fb65",
			"urls": [
				"bzzr://fe17907d41311239f89c5f3241836527c18b224d3fedc14805bc462af79f4a85"
			]
		}
	},
	"version": 1
}